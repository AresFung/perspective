{"version":3,"sources":["webpack:///docs/webpack/universalModuleDefinition","webpack:///docs/webpack/bootstrap","webpack:///src/lib/directive.ts","webpack:///src/lib/dom.ts","webpack:///src/lib/part.ts","webpack:///src/lib/template.ts","webpack:///src/lib/template-instance.ts","webpack:///src/lib/template-result.ts","webpack:///src/lib/parts.ts","webpack:///src/lib/default-template-processor.ts","webpack:///src/lib/template-factory.ts","webpack:///src/lib/render.ts","webpack:///docs/src/lit-html.ts","webpack:///docs/logo.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","parts","this","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","text","v","setAttribute","_getValue","committer","directive","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","getTemplateElement","render","firstChild","appendInto","HTMLElement","shadowRoot","attachShadow","_inverted","_template","_style","x","y"],"mappings":"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","file":"logo.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","import {render, html} from \"lit-html\";\n\nclass PerspectiveLogo extends HTMLElement {\n    constructor() {\n        super();\n        const shadowRoot = this.attachShadow({mode: \"open\"});\n        this._inverted = false;\n        render(this._template, shadowRoot);\n    }\n\n    get _template() {\n        return html`\n            ${this._style}\n            <div class=\"outer\">\n                <div class=\"inner\">PER<span>SPECTIVE</span></div>\n            </div>\n        `;\n    }\n\n    get _style() {\n        let x = \"\",\n            y = \"\";\n        if (this._inverted) {\n            x = \"background-\";\n        } else {\n            y = \"background-\";\n        }\n        let content = `\n:host .inner {\n    line-height: initial;\n    margin-bottom: -0.28em;\n    margin-top: -0.35em;\n}\n\n:host .outer {\n    overflow: hidden;\n}\n\n:host {\n    display: inline-block;\n    position: relative;\n    ${x}color: rgb(249, 249, 249);\n    ${y}color: #242526;\n    font-family: \"Source Code Pro\";\n    font-weight: bold;\n    font-size: 2em;\n    padding: 24px;\n    letter-spacing: -0.166em;\n}\n\n:host span {\n    padding-left: 0.05em;\n    margin-left: -0.05em;\n    ${x}color: #242526;\n    ${y}color: rgb(249, 249, 249);\n}`;\n        return html`\n            <style>\n                ${content}\n            </style>\n        `;\n    }\n}\n\nwindow.customElements.define(\"perspective-logo\", PerspectiveLogo);\n"],"sourceRoot":""}